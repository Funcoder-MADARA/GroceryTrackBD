const express = require('express');
const Order = require('../models/Order');
const Product = require('../models/Products');
const User = require('../models/User');
const { validateOrderCreation, validateOrderStatusUpdate, validateObjectId, validatePagination } = require('../middleware/validation');
const { authenticateToken, authorizeShopkeeper, authorizeCompanyRep, authorizeAdmin } = require('../middleware/auth');

const router = express.Router();

// Get order by ID
router.get('/:id', authenticateToken, validateObjectId('id'), async (req, res) => {
  try {
    const order = await Order.findById(req.params.id)
      .populate('shopkeeperId', 'name email phone shopkeeperInfo')
      .populate('companyId', 'name email phone companyInfo')
      .populate('deliveryWorkerId', 'name email phone')
      .populate({
        path: 'items.productId',
        select: 'name description category unit images'
      });

    if (!order) {
      return res.status(404).json({
        error: 'Order not found',
        message: 'The requested order does not exist'
      });
    }

    // Authorization check - only allow users associated with this order to view it
    const isAuthorized = req.user.role === 'admin' ||
      order.shopkeeperId._id.toString() === req.user.id ||
      order.companyId._id.toString() === req.user.id ||
      (order.deliveryWorkerId && order.deliveryWorkerId._id.toString() === req.user.id);

    if (!isAuthorized) {
      return res.status(403).json({
        error: 'Access denied',
        message: 'You do not have permission to view this order'
      });
    }

    // Get timeline events
    const timeline = [
      {
        status: 'placed',
        date: order.createdAt,
        actor: order.shopkeeperId.name,
        notes: 'Order placed successfully'
      }
    ];

    if (order.assignedAt) {
      timeline.push({
        status: 'assigned',
        date: order.assignedAt,
        actor: order.deliveryWorkerId?.name || 'System',
        notes: 'Order assigned for delivery'
      });
    }

    if (order.acceptedAt) {
      timeline.push({
        status: 'accepted',
        date: order.acceptedAt,
        actor: order.deliveryWorkerId?.name,
        notes: 'Order accepted by delivery worker'
      });
    }

    if (order.pickedUpAt) {
      timeline.push({
        status: 'picked_up',
        date: order.pickedUpAt,
        actor: order.deliveryWorkerId?.name,
        notes: 'Order picked up from company'
      });
    }

    if (order.deliveredAt) {
      timeline.push({
        status: 'delivered',
        date: order.deliveredAt,
        actor: order.deliveryWorkerId?.name,
        notes: order.deliveryNotes || 'Order delivered successfully'
      });
    }

    if (order.cancelledAt) {
      timeline.push({
        status: 'cancelled',
        date: order.cancelledAt,
        actor: order.cancelledBy ? (
          order.cancelledBy.toString() === order.shopkeeperId._id.toString() ? order.shopkeeperId.name :
          order.cancelledBy.toString() === order.companyId._id.toString() ? order.companyId.name :
          order.cancelledBy.toString() === order.deliveryWorkerId?._id.toString() ? order.deliveryWorkerId.name :
          'System'
        ) : 'System',
        notes: order.cancellationReason || 'Order cancelled'
      });
    }

    if (order.rejectedAt) {
      timeline.push({
        status: 'rejected',
        date: order.rejectedAt,
        actor: order.rejectedBy ? (
          order.rejectedBy.toString() === order.companyId._id.toString() ? order.companyId.name :
          order.rejectedBy.toString() === order.deliveryWorkerId?._id.toString() ? order.deliveryWorkerId.name :
          'System'
        ) : 'System',
        notes: order.rejectionReason || 'Order rejected'
      });
    }

    // Return formatted response
    return res.json({
      order: {
        id: order._id,
        orderNumber: order.orderNumber,
        status: order.status,
        createdAt: order.createdAt,
        shopkeeper: {
          id: order.shopkeeperId._id,
          name: order.shopkeeperId.name,
          phone: order.shopkeeperId.phone,
          email: order.shopkeeperId.email,
          shopName: order.shopkeeperId.shopkeeperInfo.shopName,
          shopAddress: order.shopkeeperId.shopkeeperInfo.shopAddress,
        },
        company: {
          id: order.companyId._id,
          name: order.companyId.name,
          phone: order.companyId.phone,
          email: order.companyId.email,
          companyName: order.companyId.companyInfo.companyName,
          companyAddress: order.companyId.companyInfo.companyAddress,
        },
        deliveryWorker: order.deliveryWorkerId ? {
          id: order.deliveryWorkerId._id,
          name: order.deliveryWorkerId.name,
          phone: order.deliveryWorkerId.phone,
          email: order.deliveryWorkerId.email,
        } : null,
        items: order.items.map(item => ({
          id: item._id,
          productId: item.productId._id,
          productName: item.productName,
          quantity: item.quantity,
          unit: item.unit,
          unitPrice: item.unitPrice,
          totalPrice: item.totalPrice,
          productDetails: {
            description: item.productId.description,
            category: item.productId.category,
            images: item.productId.images,
          }
        })),
        delivery: {
          area: order.deliveryArea,
          address: order.deliveryAddress,
          city: order.deliveryCity,
          instructions: order.deliveryInstructions,
          preferredDate: order.preferredDeliveryDate,
        },
        payment: {
          method: order.paymentMethod,
          status: order.paymentStatus,
          subTotal: order.totalAmount,
          taxAmount: order.taxAmount,
          deliveryCharge: order.deliveryCharge,
          finalAmount: order.finalAmount,
        },
        notes: order.notes,
        timeline: timeline.sort((a, b) => b.date - a.date)
      }
    });

  } catch (error) {
    console.error('Get order details error:', error);
    res.status(500).json({
      error: 'Failed to get order details',
      message: 'An error occurred while fetching order details'
    });
  }
});

// Get order history
router.get('/history', authenticateToken, async (req, res) => {
